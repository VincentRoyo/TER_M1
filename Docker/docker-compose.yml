services:
  mongodb:
    image: mongo:6.0
    container_name: mongodb_container
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./MongoDB/data/mongo_config:/data/configdb
    networks:
      - mongo_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 5s
      retries: 5
      start_period: 5s

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
    networks:
      - mongo_network

  init-db-mongodb:
    build:
      context: ../
      dockerfile: Python/DockerFiles/MongoDB/Dockerfile
    container_name: init_db_mongodb_container
    volumes:
      - ./MongoDB/output:/app/output
    depends_on:
      - mongodb
    networks:
      - mongo_network
    restart: "no"

  spring-boot-app:
    build:
      context: .
      dockerfile: API/Dockerfile
    container_name: spring_boot_container
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - mongo_network

  frontend:
    build:
      context: .
      dockerfile: React/Dockerfile
    container_name: react_frontend
    restart: "no"
    ports:
      - "3000:80"
    depends_on:
      - spring-boot-app
    networks:
      - mongo_network
      
  locust:
    build:
      context: ./Locust
    container_name: locust_container
    volumes:
      - ./Locust/output:/app/output
    depends_on:
      ycsb:
        condition: service_completed_successfully
    networks:
      - mongo_network
    ports:
      - "8089:8089" 
    command: >
      -f locustfile.py --class-picker
      --host=http://spring-boot-app:8080
    restart: "no"

  ycsb:
    build:
      context: .
      dockerfile: ./YCSB/Dockerfile
    container_name: ycsb_container
    depends_on:
      init-db-mongodb:
        condition: service_completed_successfully
      init-db-couchdb:
        condition: service_completed_successfully
    volumes:
      - ./YCSB/result:/app/result
      - ./MongoDB/output:/ExtractIds/MongoDB
      - ./CouchDB/output:/ExtractIds/CouchDB
    networks:
      - mongo_network
    ports:
      - "8088:8088"
    restart: "no"
 
  couchdb:
    image: couchdb:3
    container_name: couchdb_container
    restart: "no"
    ports:
      - "5984:5984"
    environment:
      COUCHDB_USER: admin
      COUCHDB_PASSWORD: password
      COUCHDB_QUERY_SERVER_JAVASCRIPT_STACK: 1345217728
    volumes:
      - ./CouchDB/my_config.ini:/opt/couchdb/etc/local.d/my_config.ini
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5984"]
      interval: 5s
      retries: 5
      start_period: 5s
    ulimits:
      nofile:
        soft: 1048576
        hard: 1048576
      nproc:
        soft: 512000
        hard: 512000
      stack:
        soft: 2000000000
        hard: 2000000000
    networks:
      - mongo_network

  init-db-couchdb:
    build:
      context: ../
      dockerfile: Python/DockerFiles/CouchDB/Dockerfile
    container_name: init_db_couchdb_container
    volumes:
      - ./CouchDB/output:/app/output
    depends_on:
      couchdb:
        condition: service_healthy
    networks:
      - mongo_network
    restart: "no"
    
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8085:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - mongo_network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8085:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - mongo_network


networks:
  mongo_network:
    driver: bridge

